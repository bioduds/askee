services:
  # Main Askee Node
  askee-node-primary:
    build: .
    container_name: askee-node-primary
    ports:
      - "8080:8080"  # API server
      - "8081:8081"  # P2P network
      - "8082:8082"  # Discovery service
    environment:
      - NODE_ENV=production
      - ASKEE_NODE_ID=primary
      - ASKEE_DATA_DIR=/app/data
      - ASKEE_LOG_DIR=/app/logs
      - ASKEE_NETWORK_MODE=primary
      - ASKEE_BOOTSTRAP_NODES=
    volumes:
      - askee-data-primary:/app/data
      - askee-logs-primary:/app/logs
    networks:
      - askee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Secondary Askee Node (for testing distributed functionality)
  askee-node-secondary:
    build: .
    container_name: askee-node-secondary
    ports:
      - "8180:8080"  # API server
      - "8181:8081"  # P2P network
      - "8182:8082"  # Discovery service
    environment:
      - NODE_ENV=production
      - ASKEE_NODE_ID=secondary
      - ASKEE_DATA_DIR=/app/data
      - ASKEE_LOG_DIR=/app/logs
      - ASKEE_NETWORK_MODE=secondary
      - ASKEE_BOOTSTRAP_NODES=askee-node-primary:8081
    volumes:
      - askee-data-secondary:/app/data
      - askee-logs-secondary:/app/logs
    networks:
      - askee-network
    restart: unless-stopped
    depends_on:
      - askee-node-primary
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for distributed caching and coordination
  redis:
    image: redis:7-alpine
    container_name: askee-redis
    ports:
      - "6379:6379"
    volumes:
      - askee-redis-data:/data
    networks:
      - askee-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: askee-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=askee
      - POSTGRES_USER=askee
      - POSTGRES_PASSWORD=askee_secure_password
    volumes:
      - askee-postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - askee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U askee"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: askee-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - askee-prometheus-data:/prometheus
    networks:
      - askee-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: askee-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=askee_admin
    volumes:
      - askee-grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - askee-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  askee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  askee-data-primary:
  askee-data-secondary:
  askee-logs-primary:
  askee-logs-secondary:
  askee-redis-data:
  askee-postgres-data:
  askee-prometheus-data:
  askee-grafana-data:
