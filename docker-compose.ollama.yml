version: '3.8'

services:
  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: askee-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
      - ./models:/models
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - askee-network

  # Askee Node Agent
  askee-node:
    build:
      context: .
      dockerfile: Dockerfile.node
    container_name: askee-node-agent
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "3000:3000"  # React frontend
    volumes:
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NODE_ENV=production
      - OLLAMA_HOST=ollama:11434
      - ASKEE_NODE_ID=${ASKEE_NODE_ID:-$(hostname)}
      - ASKEE_NETWORK_MODE=node
      - ASKEE_ENABLE_ORCHESTRATION=true
    depends_on:
      - ollama
      - postgres
    networks:
      - askee-network

  # PostgreSQL for node data and credits
  postgres:
    image: postgres:15-alpine
    container_name: askee-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=askee
      - POSTGRES_USER=askee
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-askee123}
    networks:
      - askee-network

  # Redis for caching and orchestration
  redis:
    image: redis:7-alpine
    container_name: askee-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - askee-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: askee-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - askee-network

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: askee-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - askee-network

networks:
  askee-network:
    driver: bridge

volumes:
  ollama-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
